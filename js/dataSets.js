let data_sets = [
    {
        name: 'Trading Data',
        sim_count: 144,
        events_folder: 'momentumTradingData/events',
        param_folder: null,
        parse: parseStockMarketData,
    },
    {
        name: 'MagPhyx Grid',
        sim_count: 99,
        events_folder: 'data4/events',
        param_folder: 'data4/commands',
        parse: parseMagPhyxData,
    },
    {
        name: 'MagPhyx Random (7)',
        sim_count: 99,
        events_folder: 'data7/events',
        param_folder: 'data7/commands',
        parse: parseMagPhyxData,
    }
];

/**
 * Data parsers should structure the data as follows:
 * 
 * simulations = [
 *   { // first simulation
 *     params:
 *     meta:
 *     events: []
 *   },
 *   { // second simulation
 *     params:
 *     meta:
 *     events: []
 *   }
 * ]
 * 
 */
function parseStockMarketData(eventData) {
    let simulations = [];
    let eventTypes = ['buy', 'sell', 'stay'];

    for (let i = 0; i < eventData.length; i++) {
        let oneSim = eventData[i];

        simulations.push(
            {
                params: null,
                meta: {},
                events: []
            }
        )
        for (let j = 0; j < oneSim.length; j++) {
            simulations[i].events.push(oneSim[j]);
        }
    }

    return {
        simulations: simulations,
        eventTypes: eventTypes
    };
}

/**
 * Parse data generated by the MagPhyx simulation
 * @param eventData a 2D array of simulations/data events
 * @param paramData an array of the parameters used to generate the simulations
 * @returns an data object
 */
function parseMagPhyxData(eventData, paramData) {
    let simulations = [];
    let eventTypes = ['collision', 'beta = 0', 'pr = 0', 'pphi = 0', 'ptheta = 0'];

    for (let i = 0; i < eventData.length; i++) {
        let oneSim = eventData[i];
        simulations.push(
            {
                params: paramData[i],
                meta: {},
                events: []
            }
        )
        for (let j = 0; j < oneSim.length; j++) {
            let oneEvent = oneSim[j];
            simulations[i].events.push({
                n: oneEvent.n,
                event_type: oneEvent[' event_type'],
                beta: oneEvent[' beta'],
                phi: oneEvent[' phi'],
                pphi: oneEvent[' pphi'],
                ptheta: oneEvent[' ptheta'],
                theta: oneEvent[' theta'],
                r: oneEvent[' r'],
                ' t': oneEvent[' t']
            });
            simulations[i].events[j][' t'] = oneEvent[' t'];
        }
    }

    return {
        simulations: simulations,
        eventTypes: eventTypes
    };
}
